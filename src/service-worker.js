const ASSETS = `cache${TIMESTAMP}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const assetsPath = "/assets.json";
let to_cache = [];
let staticAssets = new Set([]);
const routes = Object.values(ROUTES);

async function getStaticAssetsList() {
  if (!staticAssets.size) {
    return fetch(assetsPath)
      .then((response) => response.json())
      .then((res) => {
        const staticFiles = Object.values(res).reduce(
          (allStaticFiles, staticFiles) => {
            const newStaticFiles = Object.values(staticFiles).reduce(
              (newStaticFiles, staticFile) => {
                Array.isArray(staticFile)
                  ? newStaticFiles.push(...staticFile)
                  : newStaticFiles.push(staticFile);
                return newStaticFiles;
              },
              [...allStaticFiles]
            );

            return newStaticFiles;
          },
          []
        );

        to_cache = staticFiles;
        staticAssets = new Set(staticFiles);
        return to_cache;
      });
  }

  return to_cache;
}

self.addEventListener("install", (event) => {
  event.waitUntil(
    Promise.all([getStaticAssetsList(), caches.open(ASSETS)])
      .then(([staticAssets, cache]) => cache.addAll(staticAssets))
      .then(() => {
        self.skipWaiting();
      })
  );
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then(async (keys) => {
      // delete old caches
      for (const key of keys) {
        if (key !== ASSETS) await caches.delete(key);
      }

      self.clients.claim();
    })
  );
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request) {
  const cache = await caches.open(`offline${TIMESTAMP}`);

  try {
    const response = await fetch(request);
    cache.put(request, response.clone());
    return response;
  } catch (err) {
    const response = await cache.match(request);
    if (response) return response;

    throw err;
  }
}

self.addEventListener("fetch", (event) => {
  if (event.request.method !== "GET" || event.request.headers.has("range"))
    return;

  const url = new URL(event.request.url);

  // don't try to handle e.g. data: URIs
  const isHttp = url.protocol.startsWith("http");
  const isDevServerRequest =
    url.hostname === self.location.hostname && url.port !== self.location.port;
  const isStaticAsset =
    url.host === self.location.host && staticAssets.has(url.pathname);
  const skipBecauseUncached =
    event.request.cache === "only-if-cached" && !isStaticAsset;
  if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
    event.respondWith(
      (async () => {
        // always serve static files and bundler-generated assets from cache.
        // if your application has other URLs with data that will never change,
        // set this variable to true for them and they will only be fetched once.
        const cachedAsset =
          isStaticAsset && (await caches.match(event.request));
        // for pages, you might want to serve a shell `service-worker-index.html` file,
        if (
          !cachedAsset &&
          url.origin === self.origin &&
          routes.find((route) =>
            new RegExp("^" + route + "$").test(url.pathname)
          )
        ) {
          return caches.match("/service-worker-index.html");
        }

        return cachedAsset || fetchAndCache(event.request);
      })()
    );
  }
});
